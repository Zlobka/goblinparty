---
import Layout from "../../../layouts/Layout.astro";
import Pagetitle from "../../../layouts/Pagetitle.astro";
import { creatures } from "../../../data/creatures";

const itemsPerPage = 30;
---

<Layout title="Goblins">
	<div class="search-container">
		<div class="search-header">
			<Pagetitle pagetitle="Существа" />
			<input
				id="searchInput"
				type="text"
				placeholder="Поиск по названию..."
				class="search-input"
			/>
		</div>
	</div>
	<!-- Переход на конкретную страницу -->
	<div class="page-selector">
		<label for="pageInput">Перейти на страницу:</label>
		<input type="number" id="pageInput" min="1" value="1" />
		<span id="totalPagesLabel"></span>
		<button id="goToPageButton">Перейти</button>
	</div>

	<div
		class="image-gallery"
		id="creaturesGallery"
		data-creatures={JSON.stringify(creatures)}
		data-items-per-page={itemsPerPage}
	>
		<div class="image-row" id="imageRow"></div>
	</div>

	<!-- Пагинация -->
	<div class="pagination">
		<button
			class="prev-page slider-btn"
			id="prevPageButton"
			disabled="true"
		>
			&#8656; <!-- Стрелка влево -->
		</button>
		<button
			class="next-page slider-btn"
			id="nextPageButton"
			disabled="true"
		>
			&#8658; <!-- Стрелка вправо -->
		</button>
	</div>
</Layout>

<script type="module">
	document.addEventListener("DOMContentLoaded", () => {
		const searchInput = document.getElementById("searchInput");
		const imageRow = document.getElementById("imageRow");
		const prevPageButton = document.getElementById("prevPageButton");
		const nextPageButton = document.getElementById("nextPageButton");
		const pageInput = document.getElementById("pageInput");
		const goToPageButton = document.getElementById("goToPageButton");
		const totalPagesLabel = document.getElementById("totalPagesLabel");

		// Данные передаются через атрибут data-creatures
		const creatures = JSON.parse(
			document
				.getElementById("creaturesGallery")
				.getAttribute("data-creatures"),
		);
		let filteredCreatures = creatures;
		let currentPage = 1;

		const itemsPerPage = parseInt(
			document
				.getElementById("creaturesGallery")
				.getAttribute("data-items-per-page"),
		);

		// Функция для рендера существ
		function renderCreatures() {
			const startIndex = (currentPage - 1) * itemsPerPage;
			const endIndex = startIndex + itemsPerPage;

			// Обновляем общее количество страниц
			const totalPages = Math.ceil(
				filteredCreatures.length / itemsPerPage,
			);

			// Проверяем границы текущей страницы
			if (currentPage > totalPages) {
				currentPage = totalPages;
			}

			// Отображаем текущую страницу
			const creaturesToDisplay = filteredCreatures.slice(
				startIndex,
				endIndex,
			);
			imageRow.innerHTML = ""; // Очищаем текущие элементы

			if (creaturesToDisplay.length > 0) {
				creaturesToDisplay.forEach((creature) => {
					const creatureElement = document.createElement("div");
					creatureElement.classList.add("image-item");
					creatureElement.innerHTML = `
                        <a href="${creature.link}" target="_blank">
                            <p>${creature.enname}</p>
                        </a>
                        <a href="${creature.link}" target="_blank">
                            <img src="${creature.img}" alt="${creature.enname}" width="250" height="350">
                        </a>
                    `;
					imageRow.appendChild(creatureElement);
				});
			} else {
				imageRow.innerHTML = "<p>Существа не найдены.</p>";
			}

			// Обновляем состояние кнопок
			prevPageButton.disabled = currentPage === 1 || totalPages === 0;
			nextPageButton.disabled =
				currentPage === totalPages || totalPages === 0;

			// Обновляем отображение общего количества страниц
			totalPagesLabel.textContent = `из ${totalPages}`;

			// Обновляем поле ввода текущей страницы
			pageInput.value = currentPage;

			// Прокрутка наверх
			window.scrollTo(0, 0);
		}

		// Функция фильтрации
		searchInput.addEventListener("input", () => {
			const query = searchInput.value.toLowerCase();
			filteredCreatures = creatures.filter((creature) =>
				creature.enname.toLowerCase().includes(query),
			);

			currentPage = 1; // Сбрасываем текущую страницу на первую
			renderCreatures();
		});

		// Обработчики кнопок пагинации
		prevPageButton.addEventListener("click", () => {
			if (currentPage > 1) {
				currentPage--;
				renderCreatures();
			}
		});

		nextPageButton.addEventListener("click", () => {
			const totalPages = Math.ceil(
				filteredCreatures.length / itemsPerPage,
			);
			if (currentPage < totalPages) {
				currentPage++;
				renderCreatures();
			}
		});

		pageInput.addEventListener("keydown", (event) => {
			if (event.key === "Enter") {
				const requestedPage = parseInt(pageInput.value, 10);
				const totalPages = Math.ceil(
					filteredCreatures.length / itemsPerPage,
				);
				if (requestedPage >= 1 && requestedPage <= totalPages) {
					currentPage = requestedPage;
					renderCreatures();
				} else {
					alert(`Введите номер страницы от 1 до ${totalPages}`);
				}
			}
		});

		goToPageButton.addEventListener("click", () => {
			const requestedPage = parseInt(pageInput.value, 10);
			const totalPages = Math.ceil(
				filteredCreatures.length / itemsPerPage,
			);
			if (requestedPage >= 1 && requestedPage <= totalPages) {
				currentPage = requestedPage;
				renderCreatures();
			} else {
				alert(`Введите номер страницы от 1 до ${totalPages}`);
			}
		});

		// Инициализация отображения
		renderCreatures();
	});
</script>

<style>
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 10px;
		margin-top: 20px;
	}

	.pagination button {
		padding: 10px 20px;
		background-color: #ccc;
		border: 2px solid black;
		cursor: pointer;
		border-radius: 10px;
	}

	.pagination button:disabled {
		background-color: #ddd;
		cursor: not-allowed;
	}

	.slider-btn {
		position: fixed;
		top: 60%; /* Центр по высоте */
		transform: translateY(-50%); /* Выравнивание по центру */
		width: 40px;
		height: 80px;
		display: flex;
		justify-content: center;
		align-items: center;
		background-color: #ccc;
		border: 2px solid black;
		border-radius: 50%;
		font-size: 30px;
		font-weight: bold;
		cursor: pointer;
		z-index: 1000; /* Поверх контента */
		opacity: 0.4; /* Легкая прозрачность */
		transition:
			background-color 0.3s,
			transform 0.3s,
			opacity 0.3s; /* Плавное изменение */
	}

	.slider-btn:hover {
		background-color: rgba(
			117,
			112,
			112,
			0.8
		); /* Изменение цвета при наведении */
		opacity: 1; /* Убираем прозрачность при наведении */
	}

	.slider-btn:disabled {
		background-color: #ddd;
		cursor: not-allowed;
		opacity: 0.5; /* Прозрачность для неактивных кнопок */
	}

	.prev-page {
		left: 10px; /* Отступ от левого края */
	}

	.next-page {
		right: 10px; /* Отступ от правого края */
	}

	@media (min-width: 800px) {
		.prev-page {
			left: calc(50% - 400px); /* Ограничиваем отступ от центра */
		}

		.next-page {
			right: calc(50% - 400px); /* Ограничиваем отступ от центра */
		}

		.search-input {
			width: 100%; /* Растягиваем на всю ширину */
			max-width: 300px; /* Ограничиваем максимальную ширину */
			margin: 0 auto; /* Центрируем элемент по горизонтали */
			display: block; /* Убираем возможное поведение inline-block */
		}
	}

	.page-selector {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 20px;
		gap: 10px;
	}

	.page-selector input {
		width: 50px;
		padding: 5px;
		text-align: center;
	}

	.page-selector button {
		padding: 5px 10px;
		background-color: #ccc;
		border: 2px solid black;
		cursor: pointer;
		border-radius: 5px;
	}
</style>
