---
import Layout from "../../../layouts/Layout.astro";
import Pagetitle from "../../../layouts/Pagetitle.astro";
import { tokens } from "../../../data/tokens";

const itemsPerPage = 30;
---

<Layout title="Tokens">
    <div class="search-container">
        <div class="search-header">
            <Pagetitle pagetitle="Токены" />
            <input
                id="searchInput"
                type="text"
                placeholder="Поиск по названию..."
                class="search-input"
            />
        </div>
    </div>
    <!-- Переход на конкретную страницу -->
    <div class="page-selector">
        <label for="pageInput">На страницу:</label>
        <input type="number" id="pageInput" min="1" value="1" />
        <span id="totalPagesLabel"></span>
        <button id="goToPageButton">Перейти</button>
    </div>

    <div
        class="image-gallery"
        id="tokensGallery"
        data-tokens={JSON.stringify(tokens)}
        data-items-per-page={itemsPerPage}
    >
        <div class="image-row" id="imageRow"></div>
    </div>

    <!-- Пагинация -->
    <div class="pagination">
        <button
            class="prev-page slider-btn"
            id="prevPageButton"
            disabled="true"
        >
            &#8656;
        </button>
        <button
            class="next-page slider-btn"
            id="nextPageButton"
            disabled="true"
        >
            &#8658;
        </button>
    </div>
</Layout>

<script type="module">
    document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById("searchInput");
        const imageRow = document.getElementById("imageRow");
        const prevPageButton = document.getElementById("prevPageButton");
        const nextPageButton = document.getElementById("nextPageButton");
        const pageInput = document.getElementById("pageInput");
        const goToPageButton = document.getElementById("goToPageButton");
        const totalPagesLabel = document.getElementById("totalPagesLabel");

        const tokens = JSON.parse(
            document
                .getElementById("tokensGallery")
                .getAttribute("data-tokens"),
        );

        let filteredTokens = tokens;
        let currentPage = 1;

        const itemsPerPage = parseInt(
            document
                .getElementById("tokensGallery")
                .getAttribute("data-items-per-page"),
        );

        // Функция для рендера токенов
        function renderTokens() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            const totalPages = Math.ceil(filteredTokens.length / itemsPerPage);
            if (currentPage > totalPages) currentPage = totalPages;

            const tokensToDisplay = filteredTokens.slice(startIndex, endIndex);
            imageRow.innerHTML = "";

            if (tokensToDisplay.length > 0) {
                tokensToDisplay.forEach((token) => {
                    const tokenElement = document.createElement("div");
                    tokenElement.classList.add("image-item");
                    tokenElement.innerHTML = `
                        <a href="${token.link}" target="_blank">
                            <p>${token.enname}</p>
                        </a>
                        <a href="${token.link}" target="_blank">
                            <img src="${token.img}" alt="${token.enname}" width="250" height="350">
                        </a>
                    `;
                    imageRow.appendChild(tokenElement);
                });
            } else {
                imageRow.innerHTML = "<p>Токены не найдены.</p>";
            }

            // Обновляем состояние кнопок пагинации
            prevPageButton.disabled = currentPage === 1 || totalPages === 0;
            nextPageButton.disabled =
                currentPage === totalPages || totalPages === 0;

            // Обновляем отображение номера текущей страницы
            totalPagesLabel.textContent = `из ${totalPages}`;
            pageInput.value = currentPage;

            // Прокрутка наверх
            window.scrollTo(0, 0);
        }

        // Фильтрация токенов
        searchInput.addEventListener("input", () => {
            const query = searchInput.value.toLowerCase();
            filteredTokens = tokens.filter((token) =>
                token.enname.toLowerCase().includes(query),
            );

            currentPage = 1;
            renderTokens();
        });

        // Кнопки пагинации
        prevPageButton.addEventListener("click", () => {
            if (currentPage > 1) {
                currentPage--;
                renderTokens();
            }
        });

        nextPageButton.addEventListener("click", () => {
            const totalPages = Math.ceil(filteredTokens.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTokens();
            }
        });

        pageInput.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                const requestedPage = parseInt(pageInput.value, 10);
                const totalPages = Math.ceil(
                    filteredTokens.length / itemsPerPage,
                );
                if (requestedPage >= 1 && requestedPage <= totalPages) {
                    currentPage = requestedPage;
                    renderTokens();
                } else {
                    alert(`Введите номер страницы от 1 до ${totalPages}`);
                }
            }
        });

        // Переход к определенной странице
        goToPageButton.addEventListener("click", () => {
            const requestedPage = parseInt(pageInput.value, 10);
            const totalPages = Math.ceil(filteredTokens.length / itemsPerPage);

            if (requestedPage >= 1 && requestedPage <= totalPages) {
                currentPage = requestedPage;
                renderTokens();
            } else {
                alert(`Введите номер страницы от 1 до ${totalPages}`);
            }
        });

        // Инициализация
        renderTokens();
    });
</script>

<style>
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
    }

    .pagination button {
        padding: 10px 20px;
        background-color: #ccc;
        border: 2px solid black;
        cursor: pointer;
        border-radius: 10px;
    }

    .pagination button:disabled {
        background-color: #ddd;
        cursor: not-allowed;
    }

    .slider-btn {
        position: fixed;
        top: 60%;
        transform: translateY(-50%); /* Центрирование */
        width: 40px;
        height: 60px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #ccc;
        border: 2px solid black;
        border-radius: 50%;
        font-size: 30px;
        font-weight: bold;
        cursor: pointer;
        z-index: 1000; /* Поверх контента */
        opacity: 0.4; /* Легкая прозрачность */
        transition:
            background-color 0.3s,
            transform 0.3s,
            opacity 0.3s;
    }

    .slider-btn:hover {
        background-color: rgba(117, 112, 112, 0.8);
        opacity: 1;
    }

    .slider-btn:disabled {
        background-color: #ddd;
        cursor: not-allowed;
        opacity: 0.5;
    }

    .prev-page {
        left: max(10px, calc((100% - 800px) / 2));
    }

    .next-page {
        right: max(10px, calc((100% - 800px) / 2));
    }

    .search-input {
        width: 100%; /* Растягиваем на всю ширину */
        max-width: 200px; /* Ограничиваем максимальную ширину */
        margin: 0 auto; /* Центрируем элемент по горизонтали */
        display: block; /* Убираем возможное поведение inline-block */
    }

    .page-selector {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

    .page-selector input {
        width: 50px;
        padding: 5px;
        text-align: center;
    }

    .page-selector button {
        padding: 5px 10px;
        background-color: #ccc;
        border: 2px solid black;
        cursor: pointer;
        border-radius: 5px;
    }
</style>
